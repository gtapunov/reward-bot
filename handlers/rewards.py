from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import openai
import os
import json
from storage import save_user_data

openai.api_key = os.getenv("OPENAI_API_KEY")

CATEGORY_MAP = {
    "–ë–∞–∑–æ–≤–∞—è": "basic",
    "–°—Ä–µ–¥–Ω—è—è": "medium",
    "–°—É–ø–µ—Ä–ø—Ä–∏–∑": "super"
}

def register_reward_handlers(bot, user_data):
    ai_suggestions = {}

    def save_user_data():
        with open("user_data.json", "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)

    @bot.message_handler(commands=["addreward"])
    def add_reward(message: Message):
        markup = InlineKeyboardMarkup()
        for label in CATEGORY_MAP:
            markup.add(InlineKeyboardButton(label, callback_data=f"category:{label}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
    def handle_category_selection(call: CallbackQuery):
        category_label = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["selected_category"] = CATEGORY_MAP[category_label]
        save_user_data()

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="method:manual"),
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –æ—Ç –ò–ò", callback_data="method:ai")
        )
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("method:"))
    def handle_method_selection(call: CallbackQuery):
        method = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        if method == "manual":
            msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É:")
            bot.register_next_step_handler(msg, handle_manual_reward)
        elif method == "ai":
            send_ai_suggestions(call.message)

    def handle_manual_reward(message: Message):
        user_id = str(message.from_user.id)
        category = user_data[user_id]["selected_category"]
        reward = message.text.strip()
        user_data[user_id].setdefault("rewards", {}).setdefault(category, []).append(reward)
        save_user_data(user_data)
        bot.reply_to(message, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward}")

    def send_ai_suggestions(message: Message):
        user_id = str(message.chat.id)
        category = user_data[user_id]["selected_category"]
        prompt = "–ü—Ä–∏–¥—É–º–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏. –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            suggestions = response.choices[0].message["content"].strip().split("\n")
            ai_suggestions[user_id] = suggestions

            text = "\n".join(f"{i+1}. {s}" for i, s in enumerate(suggestions))
            markup = InlineKeyboardMarkup()
            for i in range(3):
                markup.add(InlineKeyboardButton(str(i+1), callback_data=f"select:{i}"))
            markup.add(InlineKeyboardButton("üîÑ –ï—â—ë", callback_data="more"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë –∏–¥–µ–∏:\n" + text, reply_markup=markup)
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select:") or call.data == "more")
    def handle_ai_choice(call: CallbackQuery):
        user_id = str(call.from_user.id)
        if call.data == "more":
            send_ai_suggestions(call.message)
            return
        index = int(call.data.split(":")[1])
        reward = ai_suggestions[user_id][index]
        category = user_data[user_id]["selected_category"]
        user_data[user_id].setdefault("rewards", {}).setdefault(category, []).append(reward)
        save_user_data(user_data)
        bot.send_message(call.message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward}")
