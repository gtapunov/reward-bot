from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import openai
import os
import json
from storage import save_user_data

openai.api_key = os.getenv("OPENAI_API_KEY")

CATEGORY_MAP = {
    "–ë–∞–∑–æ–≤–∞—è": "basic",
    "–°—Ä–µ–¥–Ω—è—è": "medium",
    "–°—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞": "super"
}

SUBCATEGORY_MAP = {
    "–ó–¥–æ—Ä–æ–≤–∞—è": "healthy",
    "–î–æ—Ñ–∞–º–∏–Ω–æ–≤–∞—è": "dopamine"
}

CATEGORY_LABELS = {
    "basic_healthy": "–ë–∞–∑–æ–≤—ã–µ (–ó–¥–æ—Ä–æ–≤—ã–µ)",
    "basic_dopamine": "–ë–∞–∑–æ–≤—ã–µ (–î–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–µ)",
    "medium_healthy": "–°—Ä–µ–¥–Ω–∏–µ (–ó–¥–æ—Ä–æ–≤—ã–µ)",
    "medium_dopamine": "–°—Ä–µ–¥–Ω–∏–µ (–î–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–µ)",
    "super": "–°—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥—ã"
}

def register_reward_handlers(bot, user_data):
    ai_suggestions = {}

    @bot.message_handler(commands=["addreward"])
    def add_reward(message: Message):
        markup = InlineKeyboardMarkup()
        for label in CATEGORY_MAP:
            markup.add(InlineKeyboardButton(label, callback_data=f"category:{label}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
    def handle_category_selection(call: CallbackQuery):
        category_label = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["selected_category"] = CATEGORY_MAP[category_label]
        save_user_data()

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–°—É–ø–µ—Ä–ø—Ä–∏–∑", —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if category_label == "–°—É–ø–µ—Ä–ø—Ä–∏–∑":
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="method:manual"),
                InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –æ—Ç –ò–ò", callback_data="method:ai")
            )
            bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=markup)
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: –∑–¥–æ—Ä–æ–≤–∞—è / –¥–æ—Ñ–∞–º–∏–Ω–æ–≤–∞—è
            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("üßò –ó–¥–æ—Ä–æ–≤–∞—è", callback_data="type:healthy"),
                InlineKeyboardButton("üì± –î–æ—Ñ–∞–º–∏–Ω–æ–≤–∞—è", callback_data="type:dopamine")
            )
            bot.edit_message_text("–£—Ç–æ—á–Ω–∏ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã:",
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  reply_markup=markup)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("type:"))
    def handle_type_selection(call: CallbackQuery):
        reward_type = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        user_data[user_id]["selected_type"] = reward_type
        save_user_data()

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="method:manual"),
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –æ—Ç –ò–ò", callback_data="method:ai")
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("subcategory:"))
    def handle_subcategory_selection(call: CallbackQuery):
        subcategory_label = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        sub = SUBCATEGORY_MAP[subcategory_label]
        category = user_data[user_id]["selected_category"]
        user_data[user_id]["selected_category"] = f"{category}_{sub}"
        save_user_data(user_data)
        show_input_method_selection(call.message)

    def show_input_method_selection(msg):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="method:manual"),
            InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ò–ò", callback_data="method:ai")
        )
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("method:"))
    def handle_method_selection(call: CallbackQuery):
        method = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        if method == "manual":
            msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É:")
            bot.register_next_step_handler(msg, handle_manual_reward)
        elif method == "ai":
            send_ai_suggestions(call.message)

    def handle_manual_reward(message: Message):
        user_id = str(message.from_user.id)
        category = user_data[user_id]["selected_category"]
        reward_type = user_data[user_id].get("selected_type")
        reward = message.text.strip()

        if category == "super":
            user_data[user_id].setdefault("rewards", {}).setdefault("super", []).append(reward)
        else:
            user_data[user_id].setdefault("rewards", {}).setdefault(category, {}).setdefault(reward_type, []).append(reward)

        save_user_data(user_data)
        bot.reply_to(message, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward}")

    def send_ai_suggestions(message: Message):
        user_id = str(message.chat.id)
        category = user_data[user_id]["selected_category"]
        prompt = "–ü—Ä–∏–¥—É–º–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏. –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            raw_lines = response.choices[0].message["content"].strip().split("\n")
            suggestions = [line.lstrip("0123456789. ").strip() for line in raw_lines if line.strip()]
            ai_suggestions[user_id] = suggestions

            text = "\n".join(f"{i+1}. {s}" for i, s in enumerate(suggestions))
            markup = InlineKeyboardMarkup()
            for i in range(3):
                markup.add(InlineKeyboardButton(str(i+1), callback_data=f"select:{i}"))
            markup.add(InlineKeyboardButton("üîÑ –ï—â—ë", callback_data="more"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë –∏–¥–µ–∏:\n" + text, reply_markup=markup)
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select:") or call.data == "more")
def handle_ai_choice(call: CallbackQuery):
    user_id = str(call.from_user.id)

    if call.data == "more":
        send_ai_suggestions(call.message)
        return

    if user_id not in ai_suggestions:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –Ø –Ω–µ –Ω–∞—à—ë–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏ –∏–¥–µ–∏ –æ—Ç –ò–ò.")
        return

    try:
        index = int(call.data.split(":")[1])
        reward = ai_suggestions[user_id][index]
        category = user_data[user_id]["selected_category"]
        subcategory = user_data[user_id].get("selected_subcategory")

        key = f"{category}_{subcategory}" if subcategory else category
        user_data[user_id].setdefault("rewards", {}).setdefault(key, []).append(reward)
        save_user_data(user_data)
        bot.send_message(call.message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward}")
    except (IndexError, ValueError):
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    @bot.message_handler(commands=["myrewards"])
    def list_rewards(message: Message):
        user_id = str(message.from_user.id)
        rewards = user_data.get(user_id, {}).get("rewards", {})

        if not rewards:
            bot.reply_to(message, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ /addreward")
            return

        text = "üéÅ –¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
        for cat in ["basic_healthy", "basic_dopamine", "medium_healthy", "medium_dopamine", "super"]:
            entries = rewards.get(cat, [])
            if entries:
                label = CATEGORY_LABELS.get(cat, cat)
                text += f"\n{label}:\n"
                for i, r in enumerate(entries, 1):
                    clean = r.lstrip("1234567890. ").strip()
                    text += f"{i}. {clean}\n"
        bot.reply_to(message, text)
