from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import openai
import random
import os
import json
from storage import save_user_data

openai.api_key = os.getenv("OPENAI_API_KEY")

user_states = {}

CATEGORY_MAP = {
    "–ë–∞–∑–æ–≤–∞—è": "basic",
    "–°—Ä–µ–¥–Ω—è—è": "medium",
    "–°—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞": "super"
}

SUBCATEGORY_MAP = {
    "–ó–¥–æ—Ä–æ–≤–∞—è": "healthy",
    "–î–æ—Ñ–∞–º–∏–Ω–æ–≤–∞—è": "dopamine"
}

CATEGORY_LABELS = {
    "basic_healthy": "–ë–∞–∑–æ–≤—ã–µ (–ó–¥–æ—Ä–æ–≤—ã–µ)",
    "basic_dopamine": "–ë–∞–∑–æ–≤—ã–µ (–î–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–µ)",
    "medium_healthy": "–°—Ä–µ–¥–Ω–∏–µ (–ó–¥–æ—Ä–æ–≤—ã–µ)",
    "medium_dopamine": "–°—Ä–µ–¥–Ω–∏–µ (–î–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–µ)",
    "super": "–°—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥—ã"
}

def register_reward_handlers(bot, user_data):
    ai_suggestions = {}

    @bot.message_handler(commands=["addreward"])
    def add_reward(message: Message):
        markup = InlineKeyboardMarkup()
        for label in CATEGORY_MAP:
            markup.add(InlineKeyboardButton(label, callback_data=f"category:{label}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("category:"))
    def handle_category_selection(call: CallbackQuery):
        category_label = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        category = CATEGORY_MAP[category_label]
    
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["selected_category"] = category
        # –°—Ç–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –±—ã–ª–∞
        user_data[user_id].pop("selected_subcategory", None)
    
        save_user_data(user_data)
    
        if category in ["basic", "medium"]:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ—Ñ–∞–º–∏–Ω–æ–≤–∞—è / –∑–¥–æ—Ä–æ–≤–∞—è
            markup = InlineKeyboardMarkup()
            for sub in SUBCATEGORY_MAP:
                markup.add(InlineKeyboardButton(sub, callback_data=f"subcategory:{sub}"))
            bot.edit_message_text(
                "–£—Ç–æ—á–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞ ‚Äî —Å—Ä–∞–∑—É –∏–¥—ë–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞
            show_input_method_selection(call.message)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("type:"))
    def handle_type_selection(call: CallbackQuery):
        reward_type = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        user_data[user_id]["selected_type"] = reward_type
        save_user_data(user_data)

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="method:manual"),
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –æ—Ç –ò–ò", callback_data="method:ai")
        )
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("subcategory:"))
    def handle_subcategory_selection(call: CallbackQuery):
        subcategory_label = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        sub = SUBCATEGORY_MAP[subcategory_label]
        category = user_data[user_id]["selected_category"]
    
        user_data[user_id]["selected_category"] = category
        user_data[user_id]["selected_subcategory"] = sub  # üí° –í–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞
        save_user_data(user_data)
    
        show_input_method_selection(call.message)

    def show_input_method_selection(msg):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="method:manual"),
            InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ò–ò", callback_data="method:ai")
        )
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("method:"))
    def handle_method_selection(call: CallbackQuery):
        method = call.data.split(":")[1]
        user_id = str(call.from_user.id)
        if method == "manual":
            msg = bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É:")
            bot.register_next_step_handler(msg, handle_manual_reward)
        elif method == "ai":
            send_ai_suggestions(call.message)
    
    def handle_manual_reward(message: Message):
        user_id = str(message.from_user.id)
        category = user_data[user_id].get("selected_category")
        subcategory = user_data[user_id].get("selected_subcategory")
    
        if not category:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
            return
    
        rewards = message.text.strip().split('\n')  # <-- –≤–æ—Ç —Ç—É—Ç –≤—Å—è –º–∞–≥–∏—è
    
        key = f"{category}_{subcategory}" if category != "super" else "super"
        user_data[user_id].setdefault("rewards", {})
        if key not in user_data[user_id]["rewards"] or not isinstance(user_data[user_id]["rewards"][key], list):
            user_data[user_id]["rewards"][key] = []
    
        user_data[user_id]["rewards"][key].extend(rewards)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤—Å–µ
    
        save_user_data(user_data)
        bot.reply_to(message, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(rewards)} –Ω–∞–≥—Ä–∞–¥!")

    def send_ai_suggestions(message: Message):
        user_id = str(message.chat.id)
        category = user_data[user_id]["selected_category"]
        prompt = "–ü—Ä–∏–¥—É–º–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏. –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )
            raw_lines = response.choices[0].message["content"].strip().split("\n")
            suggestions = [line.lstrip("0123456789. ").strip() for line in raw_lines if line.strip()]
            ai_suggestions[user_id] = suggestions

            text = "\n".join(f"{i+1}. {s}" for i, s in enumerate(suggestions))
            markup = InlineKeyboardMarkup()
            for i in range(3):
                markup.add(InlineKeyboardButton(str(i+1), callback_data=f"select:{i}"))
            markup.add(InlineKeyboardButton("üîÑ –ï—â—ë", callback_data="more"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏ –µ—â—ë –∏–¥–µ–∏:\n" + text, reply_markup=markup)
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select:") or call.data == "more")
    def handle_ai_choice(call: CallbackQuery):
        user_id = str(call.from_user.id)
    
        if call.data == "more":
            send_ai_suggestions(call.message)
            return
    
        index = int(call.data.split(":")[1])
        suggestions = ai_suggestions.get(user_id)
        if not suggestions or index >= len(suggestions):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∞–≥—Ä–∞–¥—É.")
            return
    
        reward = suggestions[index]
        category = user_data[user_id].get("selected_category")
        subcategory = user_data[user_id].get("selected_subcategory")
    
        if not category:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
            return
    
        key = f"{category}_{subcategory}" if category != "super" else "super"
    
        user_data[user_id].setdefault("rewards", {})
        if key not in user_data[user_id]["rewards"] or not isinstance(user_data[user_id]["rewards"][key], list):
            user_data[user_id]["rewards"][key] = []
    
        user_data[user_id]["rewards"][key].append(reward)
    
        save_user_data(user_data)
        bot.send_message(call.message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward}")

    @bot.message_handler(commands=["myrewards"])
    def list_rewards(message: Message):
        user_id = str(message.from_user.id)
        rewards = user_data.get(user_id, {}).get("rewards", {})

        if not rewards:
            bot.reply_to(message, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥. –î–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ /addreward")
            return

        text = "üéÅ –¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
        for cat in ["basic_healthy", "basic_dopamine", "medium_healthy", "medium_dopamine", "super"]:
            entries = rewards.get(cat, [])
            if entries:
                label = CATEGORY_LABELS.get(cat, cat)
                text += f"\n{label}:\n"
                for i, r in enumerate(entries, 1):
                    clean = r.lstrip("1234567890. ").strip()
                    text += f"{i}. {clean}\n"
        bot.reply_to(message, text)

    @bot.message_handler(commands=["editreward"])
    def start_edit_reward(message):
        user_id = str(message.from_user.id)
        user_states[user_id] = {"step": "choose_category"}
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üü¢ –ë–∞–∑–æ–≤—ã–µ", callback_data="edit_basic"))
        markup.add(InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–µ", callback_data="edit_medium"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
    def handle_edit_category(call):
        user_id = str(call.from_user.id)
        category = call.data.replace("edit_", "")
        if category in ["basic", "medium"]:
            # –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("üí™ –ó–¥–æ—Ä–æ–≤—ã–µ", callback_data="edit_healthy"))
            markup.add(InlineKeyboardButton("üéâ –î–æ—Ñ–∞–º–∏–Ω–æ–≤—ã–µ", callback_data="edit_dopamine"))
    
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    
        else:
            # –ï—Å–ª–∏ —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥
            rewards = user_data.get(user_id, {}).get("rewards", {}).get("super", [])
    
        if not rewards:
            bot.send_message(call.message.chat.id, "‚ùóÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥.")
            user_states.pop(user_id, None)
            return
    
        reward_list = "\n".join(f"{i+1}. {r}" for i, r in enumerate(rewards))
        bot.send_message(call.message.chat.id, f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥:\n\n{reward_list}\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
    
        user_states[user_id].update({"step": "await_number", "key": "super"})

    @bot.callback_query_handler(func=lambda call: call.data in ["edit_healthy", "edit_dopamine"])
    def handle_edit_sub(call):
        user_id = str(call.from_user.id)
        sub = call.data.replace("edit_", "")
        state = user_states.get(user_id, {})
        category = state.get("category")
    
        key = f"{category}_{sub}"
        rewards = user_data.get(user_id, {}).get("rewards", {}).get(key, [])
    
        if not rewards:
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {sub}")
            user_states.pop(user_id, None)
            return
    
        reward_list = "\n".join([f"{i+1}. {r}" for i, r in enumerate(rewards)])
        bot.send_message(call.message.chat.id, f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥:\n{reward_list}\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
        
        user_states[user_id].update({"step": "await_number", "key": key})

    @bot.message_handler(func=lambda message: str(message.from_user.id) in user_states and user_states[str(message.from_user.id)]["step"] == "await_number")
    def delete_reward_by_number(message):
        user_id = str(message.from_user.id)
        state = user_states[user_id]
        key = state["key"]
        rewards = user_data.get(user_id, {}).get("rewards", {}).get(key, [])
        
        try:
            index = int(message.text.strip()) - 1
            if 0 <= index < len(rewards):
                removed = rewards.pop(index)
                save_user_data(user_data)
                bot.reply_to(message, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ '{removed}' —É–¥–∞–ª–µ–Ω–∞!")
            else:
                bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã.")
        
        user_states.pop(user_id, None)

def pick_random_reward(user_data, user_id, count):
    """
    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–º–∏–¥–æ—Ä–∞.
    count ‚Äî —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–º–∏–¥–æ—Ä–∞ (–ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞).
    """
    category = "medium" if count % 4 == 0 else "basic"
    subcategory = "healthy" if random.random() < 0.7 else "dopamine"
    key = f"{category}_{subcategory}"

    rewards = user_data.get(user_id, {}).get("rewards", {}).get(key, [])
    if not rewards:
        return "‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", category, subcategory

    return random.choice(rewards), category, subcategory
