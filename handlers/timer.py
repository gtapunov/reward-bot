from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from handlers.rewards import pick_random_reward
import random
import json
import threading
import time
from storage import save_user_data

def register_timer_handlers(bot, user_data):

    @bot.message_handler(commands=["timer"])
    def start_timer(message: Message):
        user_id = str(message.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["start_time"] = datetime.utcnow().isoformat()
        save_user_data(user_data)
        bot.reply_to(message, "‚è± –¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω!")

    @bot.message_handler(commands=["cancel"])
    def cancel_timer(message: Message):
        user_id = str(message.from_user.id)
        if "start_time" in user_data.get(user_id, {}):
            del user_data[user_id]["start_time"]
            save_user_data(user_data)
            bot.reply_to(message, "‚ùå –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")

    @bot.message_handler(commands=["status"])
    def timer_status(message: Message):
        user_id = str(message.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        if "start_time" in user_data[user_id]:
            start = datetime.fromisoformat(user_data[user_id]["start_time"])
            elapsed = datetime.utcnow() - start
            remaining = timedelta(seconds=60) - elapsed
            if remaining.total_seconds() > 0:
                m = int(remaining.total_seconds() // 60)
                s = int(remaining.total_seconds() % 60)
                points = user_data[user_id].get("focus_points", 0)
                pomos = user_data[user_id].get("pomodoro_count", 0)
                status_text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {m} –º–∏–Ω {s} —Å–µ–∫\nüçÖ –ü–æ–º–∏–¥–æ—Ä–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {pomos}\n‚≠êÔ∏è Focus Points: {points}"
                bot.reply_to(message, status_text)
            else:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏ –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
                count = user_data[user_id].get("pomodoro_count", 0) + 1
                user_data[user_id]["pomodoro_count"] = count
                user_data[user_id]["focus_points"] = user_data[user_id].get("focus_points", 0) + 1
                del user_data[user_id]["start_time"]
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã
                category = "medium" if count % 4 == 0 else "basic"
                sub = "healthy" if random.random() < 0.7 else "dopamine"
                key = f"{category}_{sub}"
                
                # –í—ã–±–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã
                rewards = user_data.get(user_id, {}).get("rewards", {}).get(key, [])
                if rewards:
                    reward = random.choice(rewards)
                    bot.send_message(message.chat.id, f"üèÜ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é: {reward}")
                else:
                    bot.send_message(message.chat.id, f"üèÜ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} ({sub}) üò¢")

                # –ö–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                markup = InlineKeyboardMarkup()
                if count % 4 == 0:
                    markup.add(InlineKeyboardButton("üõå –ü–µ—Ä–µ—Ä—ã–≤ 20 –º–∏–Ω—É—Ç", callback_data="break_20"))
                else:
                    markup.add(InlineKeyboardButton("‚òï –ü–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç", callback_data="break_5"))
                markup.add(InlineKeyboardButton("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="end_focus"))
                bot.send_message(message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)

                save_user_data(user_data)
        else:
            points = user_data[user_id].get("focus_points", 0)
            pomos = user_data[user_id].get("pomodoro_count", 0)
            status_text = f"‚è≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.\nüçÖ –ü–æ–º–∏–¥–æ—Ä–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {pomos}\n‚≠ê Focus Points: {points}"
            bot.reply_to(message, status_text)

    @bot.callback_query_handler(func=lambda call: call.data in ["break_5", "break_20"])
    def handle_break(call):
        user_id = str(call.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        now = datetime.utcnow()
    
        break_minutes = 5 if call.data == "break_5" else 20
        break_end = now + timedelta(minutes=break_minutes)
        user_data[user_id]["break_until"] = break_end.isoformat()
        user_data[user_id]["break_done"] = False
        user_data[user_id]["break_start_time"] = now.isoformat()
    
        save_user_data(user_data)
    
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤", callback_data="end_break"))
    
        bot.edit_message_text(
            f"üòå –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ {break_minutes} –º–∏–Ω—É—Ç –Ω–∞—á–∞–ª—Å—è!\n"
            f"–ú–æ–∂–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–≥–æ –¥–æ—Å—Ä–æ—á–Ω–æ üëá",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "end_break")
    def handle_end_break(call):
        user_id = str(call.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id].pop("break_until", None)
    
        save_user_data(user_data)
    
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é", callback_data="next_focus"),
            InlineKeyboardButton("‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="end_focus")
        )
    
        bot.edit_message_text(
            "üîî –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == "next_focus")
    def handle_next_focus(call):
        user_id = str(call.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["start_time"] = datetime.utcnow().isoformat()
        save_user_data(user_data)
        
        bot.edit_message_text(
            "üß† –ù–æ–≤–∞—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å! 30 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã...",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )

    @bot.callback_query_handler(func=lambda call: call.data == "end_focus")
    def handle_end_focus(call):
        user_id = str(call.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id].pop("start_time", None)
        user_data[user_id]["pomodoro_count"] = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        save_user_data(user_data)
        
        bot.edit_message_text(
            "‚úÖ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id)

def check_timers(bot, user_data):
    print("[DEBUG] check_timers –∑–∞–ø—É—â–µ–Ω...")

    while True:
        time.sleep(10)
        now = datetime.utcnow()
        print(f"[DEBUG] –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ ‚Äî {now.isoformat()}")

        for user_id, data in user_data.items():
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ‚Äî –¥–∞–Ω–Ω—ã–µ: {data}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
            if "start_time" in data and not data.get("session_active"):
                start = datetime.fromisoformat(data["start_time"])
                elapsed = now - start
                print(f"[DEBUG] –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed.total_seconds()} —Å–µ–∫")

                if elapsed >= timedelta(seconds=60):  # –∑–∞–º–µ–Ω–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
                    print("[DEBUG] ‚è∞ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

                    del data["start_time"]
                    data["session_active"] = False
                    data["pomodoro_count"] = data.get("pomodoro_count", 0) + 1
                    data["focus_points"] = data.get("focus_points", 0) + 1

                    is_medium = data["pomodoro_count"] % 4 == 0
                    reward_type = "medium" if is_medium else "basic"
                    reward_category = "healthy" if random.random() < 0.7 else "dopamine"
                    reward_text, reward_type, reward_category = pick_random_reward(user_data, user_id, data["pomodoro_count"])

                    text = f"üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–≥—Ä–∞–¥—É: {reward_text}"
                    markup = InlineKeyboardMarkup()
                    btn_text = "–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ 20 –º–∏–Ω—É—Ç" if is_medium else "–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç"
                    callback = "break_20" if is_medium else "break_5"
                    markup.add(InlineKeyboardButton(btn_text, callback_data=callback))

                    bot.send_message(chat_id=user_id, text=text, reply_markup=markup)
                    save_user_data(user_data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
            if "break_start_time" in data and not data.get("break_done"):
                break_start = datetime.fromisoformat(data["break_start_time"])
                break_duration = 20 if data.get("long_break") else 5
                elapsed = now - break_start

                print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –ø—Ä–æ—à–ª–æ {elapsed.total_seconds()} —Å–µ–∫")  # <--- –î–õ–Ø –î–ï–ë–ê–ì–ê

                if elapsed >= timedelta(minutes=break_duration):
                    print("[DEBUG] –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                    data["break_done"] = True
                    print("[DEBUG] ‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!")
                    text = "‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!"
                    markup = InlineKeyboardMarkup()
                    markup.add(
                        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é", callback_data="next_focus"),
                        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="end_focus")
                    )
                    bot.send_message(chat_id=user_id, text=text, reply_markup=markup)
                    save_user_data(user_data)
