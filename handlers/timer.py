from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import random
import json

def register_timer_handlers(bot, user_data):
    def save_user_data():
        with open("user_data.json", "w", encoding="utf-8") as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)

    @bot.message_handler(commands=["timer"])
    def start_timer(message: Message):
        user_id = str(message.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["start_time"] = datetime.utcnow().isoformat()
        save_user_data()
        bot.reply_to(message, "‚è± –¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω!")

    @bot.message_handler(commands=["cancel"])
    def cancel_timer(message: Message):
        user_id = str(message.from_user.id)
        if "start_time" in user_data.get(user_id, {}):
            del user_data[user_id]["start_time"]
            save_user_data()
            bot.reply_to(message, "‚ùå –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")

    @bot.message_handler(commands=["status"])
    def timer_status(message: Message):
        user_id = str(message.from_user.id)
        user_data[user_id] = user_data.get(user_id, {})
        if "start_time" in user_data[user_id]:
            start = datetime.fromisoformat(user_data[user_id]["start_time"])
            elapsed = datetime.utcnow() - start
            remaining = timedelta(seconds=20) - elapsed
            if remaining.total_seconds() > 0:
                m = int(remaining.total_seconds() // 60)
                s = int(remaining.total_seconds() % 60)
                points = user_data[user_id].get("focus_points", 0)
                pomos = user_data[user_id].get("pomodoro_count", 0)
                status_text = f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {m} –º–∏–Ω {s} —Å–µ–∫\nüçÖ –ü–æ–º–∏–¥–æ—Ä–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {pomos}\n‚≠êÔ∏è Focus Points: {points}"
                bot.reply_to(message, status_text)
            else:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏ –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥—ã
                count = user_data[user_id].get("pomodoro_count", 0) + 1
                user_data[user_id]["pomodoro_count"] = count
                user_data[user_id]["focus_points"] = user_data[user_id].get("focus_points", 0) + 1
                del user_data[user_id]["start_time"]

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category = "medium" if count % 4 == 0 else "basic"
                sub = "healthy" if random.random() < 0.7 else "dopamine"
                key = f"{category}_{sub}"

                # –í—ã–±–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã
                rewards = user_data[user_id].get("rewards", {}).get(key, [])
                if rewards:
                    reward = random.choice(rewards)
                    bot.send_message(message.chat.id, f"üèÜ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é: {reward}")
                else:
                    bot.send_message(message.chat.id, f"üèÜ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} ({sub}) üò¢")

                # –ö–Ω–æ–ø–∫–∏: –ø–µ—Ä–µ—Ä—ã–≤ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                markup = InlineKeyboardMarkup()
                if count % 4 == 0:
                    markup.add(InlineKeyboardButton("üõå –ü–µ—Ä–µ—Ä—ã–≤ 20 –º–∏–Ω—É—Ç", callback_data="break_20"))
                else:
                    markup.add(InlineKeyboardButton("‚òï –ü–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç", callback_data="break_5"))
                markup.add(InlineKeyboardButton("üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="end_focus"))
                bot.send_message(message.chat.id, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=markup)

                save_user_data()
        else:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
