# Rewardy MVP Bot (Python + pyTelegramBotAPI)
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: /pomodoro –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä 30 –º–∏–Ω, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–≥—Ä–∞–¥–∞

import os
from dotenv import load_dotenv
load_dotenv()

import telebot
import threading
import random
import json
import time
import openai
from datetime import datetime, timedelta
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

bot = telebot.TeleBot(API_TOKEN)
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

# --- –°—á—ë—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞–≥—Ä–∞–¥—ã ---
try:
    with open("user_data.json", "r") as f:
        user_data = json.load(f)
except:
    user_data = {}

def save_data():
    with open("user_data.json", "w") as f:
        json.dump(user_data, f)

# --- –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã ---
timers = {}
start_times = {}
temp_rewards = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {
                "basic": [],
                "medium": [],
                "super": []
            }
        }
        save_data()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Rewardy. –ü–∏—à–∏ /pomodoro, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é.")

# --- –ö–æ–º–∞–Ω–¥–∞ /addreward ---
@bot.message_handler(commands=['addreward'])
def handle_addreward(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {
                "basic": [],
                "medium": [],
                "super": []
            }
        }
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–ë–∞–∑–æ–≤–∞—è", callback_data="cat_basic"),
        InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è", callback_data="cat_medium"),
        InlineKeyboardButton("–°—É–ø–µ—Ä–ø—Ä–∏–∑", callback_data="cat_super")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("cat_"))
def select_reward_method(call):
    user_id = str(call.message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {
                "basic": [],
                "medium": [],
                "super": []
            }
        }
    category = call.data.split("_")[1]
    user_data[user_id]["selected_category"] = category
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="manual"),
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ò–ò", callback_data="ai")
    )
    bot.send_message(call.message.chat.id, "–•–æ—á–µ—à—å –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–∞–º –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–∏ –æ—Ç –ò–ò?", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["manual", "ai"])
def handle_reward_option(call):
    user_id = str(call.message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {
                "basic": [],
                "medium": [],
                "super": []
            }
        }
    category = user_data[user_id].get("selected_category")
    if call.data == "manual":
        bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:")
        bot.register_next_step_handler(call.message, lambda msg: save_manual_reward(msg, category))
    else:
        suggestions = generate_ai_rewards()
        temp_rewards[user_id] = suggestions
        show_ai_suggestions(call.message.chat.id, suggestions)

def generate_ai_rewards():
    response = openai_client.chat.completions.create(
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞–±–æ—Ç—É."},
            {"role": "user", "content": "–ü—Ä–∏–¥—É–º–∞–π 3 –ø—Ä–∏—è—Ç–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é. –í—ã–≤–µ–¥–∏ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1. ... 2. ... 3. ..."}
        ],
        model="gpt-3.5-turbo"
    )
    rewards_text = response.choices[0].message.content.strip()
    suggestions = [r.strip("-‚Ä¢ 1234567890.") for r in rewards_text.split("\n") if r.strip()]
    return suggestions[:3]

def show_ai_suggestions(chat_id, options):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton(f"1Ô∏è‚É£ {options[0][:20]}", callback_data="pick_0"),
        InlineKeyboardButton(f"2Ô∏è‚É£ {options[1][:20]}", callback_data="pick_1"),
        InlineKeyboardButton(f"3Ô∏è‚É£ {options[2][:20]}", callback_data="pick_2")
    )
    markup.row(InlineKeyboardButton("üîÑ –ï—â—ë", callback_data="more_ai"))
    bot.send_message(chat_id, "–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏ '–µ—â—ë':", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pick_"))
def handle_pick_reward(call):
    user_id = str(call.message.chat.id)
    if user_id not in user_data:
        return
    idx = int(call.data.split("_")[1])
    category = user_data[user_id].get("selected_category")
    reward = temp_rewards.get(user_id, [])[idx]
    user_data[user_id]["rewards"][category].append(reward)
    save_data()
    bot.send_message(call.message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}!")

@bot.callback_query_handler(func=lambda call: call.data == "more_ai")
def handle_more_ai(call):
    user_id = str(call.message.chat.id)
    suggestions = generate_ai_rewards()
    temp_rewards[user_id] = suggestions
    show_ai_suggestions(call.message.chat.id, suggestions)

@bot.message_handler(func=lambda message: True)
def save_manual_reward(message, category):
    user_id = str(message.chat.id)
    reward = message.text.strip()
    user_data[user_id]["rewards"][category].append(reward)
    save_data()
    bot.send_message(message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}!")

# --- –ó–∞–ø—É—Å–∫ ---
print("Bot is running...")
bot.infinity_polling()
