# Rewardy MVP Bot (Python + pyTelegramBotAPI + OpenAI)
# –§–æ–∫—É—Å-—Ç–∞–π–º–µ—Ä —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π

import os
from dotenv import load_dotenv
load_dotenv()

import telebot
import threading
import random
import json
import time
from datetime import datetime, timedelta
import openai
from telebot import types

API_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

bot = telebot.TeleBot(API_TOKEN)

try:
    with open("user_data.json", "r") as f:
        user_data = json.load(f)
except:
    user_data = {}

def save_data():
    with open("user_data.json", "w") as f:
        json.dump(user_data, f)

timers = {}
start_times = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {"basic": [], "medium": [], "super": []},
            "selected_category": None,
            "ai_suggestions": []
        }
        save_data()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Rewardy. –ü–∏—à–∏ /pomodoro, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é.")

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, "üìò –ö–æ–º–∞–Ω–¥—ã:\n/pomodoro ‚Äì –Ω–∞—á–∞—Ç—å —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é –Ω–∞ 30 –º–∏–Ω\n/status ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n/cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä\n/addreward ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É\n/listrewards ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—ã\n/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")

@bot.message_handler(commands=['status'])
def handle_status(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ /start —Å–Ω–∞—á–∞–ª–∞.")
        return
    data = user_data[user_id]
    response = f"–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n- –ë–∞–∑–æ–≤—ã—Ö –æ—á–∫–æ–≤: {data['base']}\n- –î–æ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã: {15 - data['mid']}\n- –î–æ —Å—É–ø–µ—Ä–ø—Ä–∏–∑–∞: {30 - data['super']}"
    if user_id in start_times:
        elapsed = datetime.now() - start_times[user_id]
        remaining = timedelta(minutes=30) - elapsed
        minutes, seconds = divmod(int(remaining.total_seconds()), 60)
        response += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    else:
        response += "\n‚è≥ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–º–∏–¥–æ—Ä–∞."
    bot.reply_to(message, response)

@bot.message_handler(commands=['cancel'])
def cancel_timer(message):
    user_id = str(message.chat.id)
    if user_id in timers:
        timers[user_id].cancel()
        del timers[user_id]
        if user_id in start_times:
            del start_times[user_id]
        bot.reply_to(message, "‚õîÔ∏è –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")

def send_reward(user_id):
    if user_id in timers:
        del timers[user_id]
    if user_id in start_times:
        del start_times[user_id]

    data = user_data[user_id]
    data["base"] += 1
    data["mid"] += 1
    data["super"] += 1

    reward = None
    if data["super"] >= 30:
        rewards = data["rewards"]["super"]
        if rewards:
            reward = random.choice(rewards)
            bot.send_message(user_id, f"üî•üî•üî• –°—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        else:
            bot.send_message(user_id, "üî•üî•üî• –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥.")
        data["super"] = 0
        data["mid"] = 0

    elif data["mid"] >= 15:
        rewards = data["rewards"]["medium"]
        if rewards:
            reward = random.choice(rewards)
            bot.send_message(user_id, f"üéØ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        else:
            bot.send_message(user_id, "üéØ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –Ω–∞–≥—Ä–∞–¥.")
        data["mid"] = 0

    elif data["base"] % 3 == 0:
        rewards = data["rewards"]["basic"]
        if rewards:
            reward = random.choice(rewards)
            bot.send_message(user_id, f"üöÄ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        else:
            bot.send_message(user_id, "üöÄ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥.")
    else:
        bot.send_message(user_id, "‚úÖ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™")

    save_data()

@bot.message_handler(commands=['listrewards'])
def handle_listrewards(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ /start —Å–Ω–∞—á–∞–ª–∞.")
        return

    rewards = user_data[user_id]["rewards"]
    response = "üéÅ –¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
    for cat in ["basic", "medium", "super"]:
        response += f"\nüîπ {cat.capitalize()}:\n"
        if rewards[cat]:
            for i, r in enumerate(rewards[cat], 1):
                response += f"{i}. {r}\n"
        else:
            response += "‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ\n"

    bot.reply_to(message, response)

@bot.message_handler(commands=['pomodoro'])
def handle_pomodoro(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        send_welcome(message)

    if user_id in timers:
        bot.reply_to(message, "‚ö†Ô∏è –£–∂–µ –∏–¥—ë—Ç —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    bot.reply_to(message, "‚è≥ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω.")
    timer = threading.Timer(1800, send_reward, args=[user_id])
    timers[user_id] = timer
    start_times[user_id] = datetime.now()
    timer.start()

# --- AI reward generation ---
def generate_ai_rewards():
    prompt = "–ü—Ä–µ–¥–ª–æ–∂–∏ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é. –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫:"
    response = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    text = response.choices[0].message.content.strip()
    return [line.strip("0123456789. ") for line in text.split("\n") if line.strip()][:3]

@bot.message_handler(commands=['addreward'])
def handle_addreward(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ë–∞–∑–æ–≤–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°—É–ø–µ—Ä–ø—Ä–∏–∑")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, ask_reward_input_method)

def ask_reward_input_method(message):
    user_id = str(message.chat.id)
    if message.text not in ["–ë–∞–∑–æ–≤–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°—É–ø–µ—Ä–ø—Ä–∏–∑"]:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    user_data[user_id]["selected_category"] = message.text.lower()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ó–∞–¥–∞—Ç—å —Å–∞–º–æ–º—É", "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ò–ò")
    bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å–∞–º –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç –ò–ò?", reply_markup=markup)
    bot.register_next_step_handler(message, handle_reward_option)

def handle_reward_option(message):
    user_id = str(message.chat.id)
    if message.text == "–ó–∞–¥–∞—Ç—å —Å–∞–º–æ–º—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã:")
        bot.register_next_step_handler(message, save_manual_reward)
    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ò–ò":
        suggestions = generate_ai_rewards()
        user_data[user_id]["ai_suggestions"] = suggestions
        numbered = "\n".join([f"{i+1}. {s}" for i, s in enumerate(suggestions)])
        markup = types.InlineKeyboardMarkup()
        for i in range(3):
            markup.add(types.InlineKeyboardButton(f"{i+1}", callback_data=f"select_ai_{i}"))
        markup.add(types.InlineKeyboardButton("üîÅ –ï—â—ë", callback_data="more_ai"))
        bot.send_message(message.chat.id, f"–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏ '–µ—â—ë':\n{numbered}", reply_markup=markup)
        save_data()
    else:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

def save_manual_reward(message):
    user_id = str(message.chat.id)
    category = user_data[user_id].get("selected_category")
    text = message.text.strip()
    if category and text:
        user_data[user_id]["rewards"][category].append(text)
        save_data()
        bot.send_message(message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {category}.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_ai_"))
def handle_ai_selection(call):
    user_id = str(call.message.chat.id)
    index = int(call.data.split("_")[-1])
    category = user_data[user_id].get("selected_category")
    suggestion = user_data[user_id].get("ai_suggestions", [])[index]
    user_data[user_id]["rewards"][category].append(suggestion)
    save_data()
    bot.send_message(user_id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {suggestion}")

@bot.callback_query_handler(func=lambda call: call.data == "more_ai")
def handle_more_ai(call):
    user_id = str(call.message.chat.id)
    suggestions = generate_ai_rewards()
    user_data[user_id]["ai_suggestions"] = suggestions
    numbered = "\n".join([f"{i+1}. {s}" for i, s in enumerate(suggestions)])
    markup = types.InlineKeyboardMarkup()
    for i in range(3):
        markup.add(types.InlineKeyboardButton(f"{i+1}", callback_data=f"select_ai_{i}"))
    markup.add(types.InlineKeyboardButton("üîÅ –ï—â—ë", callback_data="more_ai"))
    bot.edit_message_text(f"–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏ '–µ—â—ë':\n{numbered}", call.message.chat.id, call.message.message_id, reply_markup=markup)
    save_data()

print("Bot is running...")
bot.infinity_polling()
