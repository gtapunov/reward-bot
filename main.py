import os
import telebot
from flask import Flask, request
from telebot import types
from dotenv import load_dotenv

# Load .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# Flask route for Telegram webhook
@app.route(f'/{TOKEN}', methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

# ========== –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Rewardy ‚Äî —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –Ω–∞–≥—Ä–∞–¥.")

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start /help /addreward /listrewards")

# ========== –í–°–¢–ê–í–¨ –°–Æ–î–ê –í–°–Æ –¢–í–û–Æ –õ–û–ì–ò–ö–£ REWARDY ========== #
try:
    with open("user_data.json", "r", encoding="utf-8") as f:
        user_data = json.load(f)
except FileNotFoundError:
    user_data = {}

CATEGORY_MAP = {
    "–ë–∞–∑–æ–≤–∞—è": "basic",
    "–°—Ä–µ–¥–Ω—è—è": "medium",
    "–°—É–ø–µ—Ä–ø—Ä–∏–∑": "super"
}

CATEGORY_EMOJIS = {
    "basic": "üîπ Basic:",
    "medium": "üîπ Medium:",
    "super": "üîπ Super:"
}

def save_user_data():
    with open("user_data.json", "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–≥—Ä–∞–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π /addreward —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.")

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, "–Ø –ø–æ–º–æ–≥–∞—é —Ç–µ–±–µ –Ω–∞–≥—Ä–∞–∂–¥–∞—Ç—å —Å–µ–±—è –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π /addreward.")

@bot.message_handler(commands=['listrewards'])
def list_rewards(message):
    user_id = str(message.from_user.id)
    rewards = user_data.get(user_id, {}).get("rewards", {})

    text = "üéÅ –¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
    for cat in ["basic", "medium", "super"]:
        text += f"\n{CATEGORY_EMOJIS[cat]}\n"
        entries = rewards.get(cat, [])
        if entries:
            for r in entries:
                text += f"‚Äî {r}\n"
        else:
            text += "‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ\n"

    bot.reply_to(message, text)

@bot.message_handler(commands=['addreward'])
def add_reward(message):
    markup = types.InlineKeyboardMarkup()
    for label in CATEGORY_MAP.keys():
        markup.add(types.InlineKeyboardButton(text=label, callback_data=f"select_category:{label}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–≥—Ä–∞–¥—ã:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text.startswith("/addreward "))
def save_manual_reward(message):
    user_id = str(message.from_user.id)
    category = user_data.get(user_id, {}).get("selected_category", "basic")
    reward_text = message.text[len("/addreward "):].strip()

    user_data[user_id].setdefault("rewards", {})
    user_data[user_id]["rewards"].setdefault(category, []).append(reward_text)
    save_user_data()

    bot.reply_to(message, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward_text}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_category:"))
def handle_category_selection(call):
    category_label = call.data.split(":")[1]
    user_id = str(call.from_user.id)
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]["selected_category"] = CATEGORY_MAP[category_label]

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —Å–∞–º–æ–º—É", callback_data="manual"),
        types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç –ò–ò", callback_data="ai")
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å–∞–º –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç –ò–ò:",
                          reply_markup=markup)

ai_suggestions = {}

def generate_ai_rewards():
    prompt = "–ü—Ä–∏–¥—É–º–∞–π 3 –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏. –ü—Ä–∏–º–µ—Ä—ã: '—á–∞—à–∫–∞ –∫–æ—Ñ–µ', '10 –º–∏–Ω—É—Ç –º—É–∑—ã–∫–∏', '–æ—Ç–¥—ã—Ö —Å –∫–æ—Ç–æ–º'. –¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    text = response.choices[0].message["content"].strip()
    return text.split("\n")

def send_ai_suggestions(message):
    user_id = str(message.chat.id)
    category = user_data.get(user_id, {}).get("selected_category", "basic")

    try:
        suggestions = generate_ai_rewards()
        ai_suggestions[user_id] = suggestions

        reply = "–í–æ—Ç 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã. –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏ '–µ—â—ë':\n"
        for i, s in enumerate(suggestions, 1):
            reply += f"{i}. {s}\n"

        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = [
            types.InlineKeyboardButton("1", callback_data="select_1"),
            types.InlineKeyboardButton("2", callback_data="select_2"),
            types.InlineKeyboardButton("3", callback_data="select_3"),
            types.InlineKeyboardButton("üîÑ –ï—â—ë", callback_data="more")
        ]
        markup.add(*buttons[:3])
        markup.add(buttons[3])

        bot.send_message(message.chat.id, reply, reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥: " + str(e))

@bot.callback_query_handler(func=lambda call: call.data in ["select_1", "select_2", "select_3", "more"])
def handle_ai_choice(call):
    user_id = str(call.from_user.id)
    if call.data == "more":
        send_ai_suggestions(call.message)
        return

    index = int(call.data[-1]) - 1
    reward = ai_suggestions[user_id][index]
    category = user_data.get(user_id, {}).get("selected_category", "basic")

    user_data[user_id].setdefault("rewards", {})
    user_data[user_id]["rewards"].setdefault(category, []).append(reward)
    save_user_data()

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reward}")

# ========== –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ==========
bot.remove_webhook()
bot.set_webhook(url=f"https://reward-bot-fpli.onrender.com/{TOKEN}")
