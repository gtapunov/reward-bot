# Rewardy MVP Bot (Python + pyTelegramBotAPI)
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: /pomodoro –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä 30 –º–∏–Ω, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–≥—Ä–∞–¥–∞

import os
from dotenv import load_dotenv
load_dotenv()

import telebot
import threading
import random
import json
import time
from datetime import datetime, timedelta

API_TOKEN = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(API_TOKEN)

# --- –°—á—ë—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞–≥—Ä–∞–¥—ã ---
try:
    with open("user_data.json", "r") as f:
        user_data = json.load(f)
except:
    user_data = {}

def save_data():
    with open("user_data.json", "w") as f:
        json.dump(user_data, f)

# --- –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã ---
timers = {}
start_times = {}
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.chat.id)
    print(f"[LOG] /start –æ—Ç {message.chat.first_name} ({user_id})")
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {
                "basic": [],
                "medium": [],
                "super": []
            }
        }
        save_data()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Rewardy. –ü–∏—à–∏ /pomodoro, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é.")

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
@bot.message_handler(commands=['help'])
def send_help(message):
    bot.reply_to(message, "üìò –ö–æ–º–∞–Ω–¥—ã:\n/pomodoro ‚Äì –Ω–∞—á–∞—Ç—å —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é –Ω–∞ 30 –º–∏–Ω\n/status ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n/cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª)\n/addreward ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –≤ —Å–ø–∏—Å–æ–∫\n/listrewards ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã\n/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")

# --- –ö–æ–º–∞–Ω–¥–∞ /status ---
@bot.message_handler(commands=['status'])
def handle_status(message):
    user_id = str(message.chat.id)
    print(f"[LOG] /status –æ—Ç {message.chat.first_name} ({user_id})")
    if user_id not in user_data:
        bot.reply_to(message, "–Ø –µ—â—ë –Ω–µ –∑–Ω–∞—é —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ /start —Å–Ω–∞—á–∞–ª–∞.")
        return
    data = user_data[user_id]
    response = f"–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n- –ë–∞–∑–æ–≤—ã—Ö –æ—á–∫–æ–≤: {data['base']}\n- –î–æ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã: {15 - data['mid']}\n- –î–æ —Å—É–ø–µ—Ä–ø—Ä–∏–∑–∞: {30 - data['super']}"
    if user_id in start_times:
        elapsed = datetime.now() - start_times[user_id]
        remaining = timedelta(minutes=30) - elapsed
        minutes, seconds = divmod(int(remaining.total_seconds()), 60)
        response += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–º–∏–¥–æ—Ä–∞: {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    else:
        response += "\n‚è≥ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–º–∏–¥–æ—Ä–∞."
    bot.reply_to(message, response)

# --- –ö–æ–º–∞–Ω–¥–∞ /cancel ---
@bot.message_handler(commands=['cancel'])
def cancel_timer(message):
    user_id = str(message.chat.id)
    if user_id in timers:
        timers[user_id].cancel()
        del timers[user_id]
        if user_id in start_times:
            del start_times[user_id]
        bot.reply_to(message, "‚õîÔ∏è –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–º–∏–¥–æ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.")
        print(f"[LOG] –¢–∞–π–º–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω –¥–ª—è {user_id}")
    else:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.")

# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã ---
def send_reward(user_id):
    if user_id in timers:
        del timers[user_id]
    if user_id in start_times:
        del start_times[user_id]

    data = user_data[user_id]
    print(f"[LOG] –ó–∞–≤–µ—Ä—à—ë–Ω –ø–æ–º–∏–¥–æ—Ä —É {user_id} | base: {data['base']}, mid: {data['mid']}, super: {data['super']}")

    data["base"] += 1
    data["mid"] += 1
    data["super"] += 1

    reward = None
    if data["super"] >= 30:
        rewards = data["rewards"]["super"]
        if rewards:
            reward = random.choice(rewards)
            bot.send_message(user_id, f"üî•üî•üî• –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –¢–≤–æ—è —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞: {reward}")
            print(f"[LOG] –°—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        else:
            bot.send_message(user_id, "üî•üî•üî• –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç —Å—É–ø–µ—Ä–Ω–∞–≥—Ä–∞–¥ üòÖ –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /addreward.")
        data["super"] = 0
        data["mid"] = 0

    elif data["mid"] >= 15:
        rewards = data["rewards"]["medium"]
        if rewards:
            reward = random.choice(rewards)
            bot.send_message(user_id, f"üéØ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –¢–≤–æ—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
            print(f"[LOG] –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        else:
            bot.send_message(user_id, "üéØ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –Ω–∞–≥—Ä–∞–¥ üòÖ –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /addreward.")
        data["mid"] = 0

elif data["base"] % 3 == 0:
    rewards = data["rewards"]["basic"]
    if rewards:
        reward = random.choice(rewards)
        bot.send_message(user_id, f"üöÄ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –¢–≤–æ—è –±–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        print(f"[LOG] –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
    else:
        bot.send_message(user_id, "üöÄ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–æ —É —Ç–µ–±—è –Ω–µ—Ç –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥ üòÖ –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é /addreward.")
else:
    bot.send_message(user_id, "‚úÖ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™")
    print("[LOG] –ù–∞–≥—Ä–∞–¥–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞ (–Ω–µ –∫—Ä–∞—Ç–Ω–æ 3, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –ø–æ—Ä–æ–≥–∏)")

save_data()

# --- –ö–æ–º–∞–Ω–¥–∞ /addreward ---
@bot.message_handler(commands=['addreward'])
def handle_addreward(message):
user_id = str(message.chat.id)
parts = message.text.split(maxsplit=2)

if len(parts) < 3:
    bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /addreward [basic|medium|super] [—Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã]")
    return

category = parts[1].lower()
reward_text = parts[2].strip()

if category not in ["basic", "medium", "super"]:
    bot.reply_to(message, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: basic, medium –∏–ª–∏ super.")
    return

if user_id not in user_data:
    bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª.")
    return

user_data[user_id]["rewards"][category].append(reward_text)
save_data()
bot.reply_to(message, f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ {category}!")

# --- –ö–æ–º–∞–Ω–¥–∞ /listrewards ---
@bot.message_handler(commands=['listrewards'])
def handle_listrewards(message):
    user_id = str(message.chat.id)
    if user_id not in user_data:
        bot.reply_to(message, "–ù–∞–ø–∏—à–∏ /start —Å–Ω–∞—á–∞–ª–∞.")
        return

    rewards = user_data[user_id]["rewards"]
    response = "üéÅ –¢–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:\n"
    for cat in ["basic", "medium", "super"]:
        response += f"\nüîπ {cat.capitalize()}:\n"
        if rewards[cat]:
            for i, r in enumerate(rewards[cat], 1):
                response += f"{i}. {r}\n"
        else:
            response += "‚Äî –ø–æ–∫–∞ –ø—É—Å—Ç–æ\n"

    bot.reply_to(message, response)

# --- –ö–æ–º–∞–Ω–¥–∞ /pomodoro ---
@bot.message_handler(commands=['pomodoro'])
def handle_pomodoro(message):
    user_id = str(message.chat.id)
    print(f"[LOG] /pomodoro –æ—Ç {message.chat.first_name} ({user_id})")
    if user_id not in user_data:
        user_data[user_id] = {
            "base": 0,
            "mid": 0,
            "super": 0,
            "rewards": {
                "basic": [],
                "medium": [],
                "super": []
            }
        }
        save_data()

    if user_id in timers:
        bot.reply_to(message, "‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –∏–¥—ë—Ç —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è! –î–æ–∂–¥–∏—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /cancel.")
        print(f"[LOG] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–π —Ç–∞–π–º–µ—Ä —É {user_id} ‚Äî –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        return

    bot.reply_to(message, "‚è≥ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç –∑–∞–ø—É—â–µ–Ω. –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç.")
    timer = threading.Timer(1800, send_reward, args=[user_id])
    timers[user_id] = timer
    start_times[user_id] = datetime.now()
    print("[LOG] –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç")
    timer.start()

# --- –ó–∞–ø—É—Å–∫ ---
print("Bot is running...")
bot.infinity_polling()